syntax on
syntax enable
set nocompatible              " be iMproved, required
"filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Plugins
Plugin 'L9'
Plugin 'scrooloose/nerdtree'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'junegunn/seoul256.vim'
Plugin 'gagoar/StripWhiteSpaces'
Plugin 'kien/ctrlp.vim'
Plugin 'hdima/python-syntax'
Plugin 'elzr/vim-json'
Plugin 'fatih/vim-go'
Plugin 'ngmy/vim-rubocop'
Plugin 'vim-airline/vim-airline'
Plugin 'jens-na/vim-tasktimer'
Plugin 'benmills/vimux'
Plugin 'skalnik/vim-vroom'
Plugin 'stamblerre/gocode', {'rtp': 'vim/'}
Plugin 'w0rp/ale'

" All of your Plugins must be added before the following line
call vundle#end()            " required

filetype indent plugin on

if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
   set fileencodings=ucs-bom,utf-8,latin1
endif

set viminfo='20,\"50	" read/write a .viminfo file, don't store more
set bs=indent,eol,start		" allow backspacing over everything in insert mode
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set number " Always show line numbers
set autoread " autoload file if changed externally
set showtabline=2 " Show tab numbers
set spell " spell checking on

set encoding=utf-8 " UTF-8 encoding always
set ffs=unix,dos,mac " FileSytem type assume unix first

" Leader key configuration
let mapleader = ","

" Experimental
set lazyredraw
set magic

set smartindent
set autoindent
set copyindent

set sts=2
set smarttab
set expandtab
set tabstop=2
set shiftwidth=2
set tw=0

" Status, command bar settings
set cmdheight=2 " command bar height
set laststatus=2
set statusline=%n\ %F\ %m%r\%=%c-%l/%L


" Backup Settings
set nobackup
set nowb
set noswapfile

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
  set incsearch
endif


" indent settings
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0

hi IndentGuidesOdd  ctermbg=black
hi IndentGuidesEven ctermbg=darkgrey

" fold settings
set foldenable
set foldmethod=marker
set foldlevel=2

" color scheme
colo seoul256
set background=dark

" custom maps
" vv to generate new vertical split
noremap <silent> vv <C-w>v
noremap <silent> <C-j> <C-w>h
noremap <silent> <C-k> <C-w>l

" Buffer
map gn :bn<cr>
map gp :bp<cr>
map gd :bd<cr>

" Buffers
set hidden

" plugin configuration

" Run the current file with rspec
map <Leader>rb :call VimuxRunCommand("clear; rspec " . bufname("%"))<CR>

" Prompt for a command to run
map <Leader>vp :VimuxPromptCommand<CR>

" Run last command executed by VimuxRunCommand
map <Leader>vl :VimuxRunLastCommand<CR>

" Inspect runner pane
map <Leader>vi :VimuxInspectRunner<CR>

" Close vim tmux runner opened by VimuxRunCommand
map <Leader>vq :VimuxCloseRunner<CR>

" Interrupt any command running in the runner pane
map <Leader>vx :VimuxInterruptRunner<CR>

" Zoom the runner pane (use <bind-key> z to restore runner pane)
map <Leader>vz :call VimuxZoomRunner()<CR>

" Mappings
au FileType go nmap <F8> :GoTest -short<cr>
au FileType go nmap <F9> :GoCoverageToggle -short<cr>
au FileType go nmap <F12> <Plug>(go-def)
au Filetype go nmap <leader>ga <Plug>(go-alternate-edit)
au Filetype go nmap <leader>gah <Plug>(go-alternate-split)
au Filetype go nmap <leader>gav <Plug>(go-alternate-vertical)
au FileType go nmap <leader>gt :GoDeclsDir<cr>
au FileType go nmap <leader>gc <Plug>(go-coverage-toggle)
au FileType go nmap <leader>gd <Plug>(go-def)
au FileType go nmap <leader>gdv <Plug>(go-def-vertical)
au FileType go nmap <leader>gdh <Plug>(go-def-split)
au FileType go nmap <leader>gD <Plug>(go-doc)
au FileType go nmap <leader>gDv <Plug>(go-doc-vertical)


" Vim-Go configuration
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1

" Show the progress when running :GoCoverage
let g:go_echo_command_info = 1

" Show type information
let g:go_auto_type_info = 1

" Highlight variable uses
let g:go_auto_sameids = 1

" Fix for location list when vim-go is used together with Syntastic
let g:go_list_type = "quickfix"

" Add the failing test name to the output of :GoTest
let g:go_test_show_name = 1

let g:go_fmt_command = "goimports"
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'

let g:ale_linters = {
  \ 'go': ['gopls'],
  \}

" Vim-Go configuration
let g:go_highlight_build_constraints = 1
let g:go_highlight_types = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_fmt_command = "goimports"

" let g:go_auto_sameids = 1

" Run Go Test
map <Leader>t :GoTest<CR>



" Airline configuration
let g:airline#extensions#tagbar#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_splits = 1
let g:airline#extensions#tabline#tab_nr_type = 1 " splits and tab number
let g:airline#extensions#tmuxline#enabled = 1
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" Omnifunc
autocmd FileType go setlocal omnifunc=go#complete#Complete

" NERDTree
" Open NERDTree automatically on startup
" autocmd vimenter * NERDTree
map <C-\> :NERDTreeToggle<CR>

" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
 exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
 exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('py', 'Magenta', 'none', '#ff00ff', '#151515')
call NERDTreeHighlightFile('rb', 'Magenta', 'none', '#ff00ff', '#151515')
